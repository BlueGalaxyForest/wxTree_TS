
# 项目需求
## 概览
* 在一些OA系统,常常会使用到树形结构,树形结构大多数是PC端的,因此打算做个移动端的


# 项目准备:
## 大纲
* 创建项目->微信小程序TS版+sass的模板
* 删除无用文件跑个hello World =
	* 注意有个    // @ts-ignore 的东西啊 
	=> 在微信小程序中，如果你使用 TypeScript 进行开发，并且遇到某些情况下 TypeScript
		类型系统无法正确推断类型或者你明确知道某一处代码不符合类型规范，可以使用 // @ts-ignore 注释来忽略 TypeScript 的类型检查，让编译器跳过该部分代码的类型检查。
		
	* 
	
	
	
# 引入treeUtil,并且能够将任意指针关系的对象数组转化为 tree (ok)
## 大纲
* 在tree下面创建class (ok)
* 准备指针树列表(ok)
* 设计array的接口:  => 感觉就是: let arr:string[object] = [{a:1,b:2},{c:1}]
	const movieList = [
	  {
		movieId: 1,
		typeName: '中国分区',
		parentId: 1,
		date:'2023-11-23',
		area:'亚洲'
	  },
	  {
		movieId: 2,
		typeName: '日本分区',
		parentId: 1,
		date:'2023-11-25',
		area:'亚洲'
	  }]
	  
	const cityList = [
	  {
		cityId: 1,
		cityTitle: '深圳',
		fatherID: 1,
		province:'广东',
	  },
	  {
		cityId: 2,
		cityTitle: '广州',
		fatherID: 1,
		province:'广东'
	  }]  
	  
	  
* 类型“object”不能作为索引类型使用的 TS错误:
* 初步的转化树:
	/*
	  convertToTree(array: Array<{ [key: string]: any }>, name: string, id: string | number, fatherId: string | number) {

			const result: Array<{ [key: string]: any }> = [];
			const map: { [key: string]: any } = {};


			array.forEach((item) => {
			  item.title = item[name]
			  map[item[id]] = {
				...item
			  };
			});

			array.forEach((item) => {
			  const parent = map[item[fatherId]];
			  if (parent) {
				(parent.children || (parent.children = [])).push(map[item[id]]);
			  } else {

				result.push(map[item[id]]);
			  }
			});

			return result;
		  }
		}
	*/
	
* 需要利用接口改进:
	/*
	interface TreeNode { => 在 TypeScript 中，接口是类型的一种抽象描述，而不会生成具体的 JavaScript 代码。因此，接口的定义本身不需要导出，它在同一个项目内的任何文件中都是可见的，无需显式导入。
	  [key: string]: any;
	  title: string; // 假设 title 属性是每个节点都有的
	  children?: TreeNode[]; // 子节点数组，可选的
	}

	function convertToTree(array: Array<TreeNode>, name: string, id: string | number, fatherId: string | number): TreeNode[] {
	  const result: TreeNode[] = [];
	  const map: { [key: string]: TreeNode } = {};

	  array.forEach((item) => {
		item.title = item[name];
		map[item[id].toString()] = { // 将键转换为字符串，确保类型一致性
		  ...item,
		  children: [] // 初始化 children 数组
		};
	  });

	  array.forEach((item) => {
		const parent = map[item[fatherId]?.toString()]; // 使用可选链操作符确保不会出现 undefined
		if (parent) {
		  parent.children!.push(map[item[id].toString()]);
		} else {
		  result.push(map[item[id].toString()]);
		}
	  });

	  return result;
	}

	
	*/
	
* 先看看这颗树的转化效果如何=> 可以转化树
	
	
*  convertToTree()代码的可行性,时间复杂度和空间复杂度分析:  =>O(n) + O(n)
=> 最优化版本:
	/*
	  convertToTree(array: Array<any>, name: string, id: string | number, fatherId: string | number) {

		const result: Array<{ [key: string]: any }> = [];
		const map: { [key: string]: any } = {};

		array.forEach((item) => {
		  item.title = item[name]; // 把节点的中文值做一个统一处理
		  item.id = item[id]; // 把节点的id做一个统一处理

		  map[item[id]] = {
			...item
		  };

		  const parent = map[item[fatherId]];
		  if (parent) {
			(parent.children || (parent.children = [])).push(map[item[id]]);
		  } else {
			result.push(map[item[id]]);
		  }
		});

		return result;
	  }
	}

*/


# 根据转化的树做渲染(ok )
## 大纲
* 核心listData可以接收原始数组,也可以接收树形数组;需要这样设计,保证兼容性
* git问题:如果A文件夹使用了git init 在A文件夹下会有一个.git文件夹, A文件夹下面有 B项目文件夹和一个A.txt文本;
  B文件夹是一个微信小程序项目,然后在B文件夹下使用git init,B文件夹下生成了一个.git 文件夹. A文件夹使用了git log和B文件夹使用了git log发现展示的提交记录不一样,展示的都是A,B文件夹各自的;
  这种情况是不是意味着A,B文件夹属于两套不同的git 控制系统?
  /*
    是的，你描述的情况说明 A 文件夹和 B 文件夹分别是两个独立的 Git 仓库，它们之间没有直接的关联。虽然它们在文件系统上有一些共享的目录结构，但各自拥有独立的 Git 配置和版本历史。

	当你在 A 文件夹中运行 git init，Git 会在 A 文件夹下创建一个新的仓库，并生成 .git 目录以存储版本历史等信息。同样，当你在 B 文件夹中运行 git init，Git 会在 B 文件夹下创建一个独立的仓库，也会生成 .git 目录。

	因此，A 文件夹和 B 文件夹的提交历史是相互独立的，它们各自跟踪并记录文件的更改。如果你想将它们合并成一个仓库，你可以考虑在一个更高层次的目录（比如 A 文件夹的上级目录）中进行 git init，

	然后将 A 文件夹和 B 文件夹添加为该仓库的子目录。这样它们就可以在同一个仓库中共享版本历史。
  */
### 实现
1. 完善tree,inside(ok)
2. 把inside的点击节点展开先做了 => 先能够简单展示(ok)
	* 首先来个 isShowChildren 属性来控制节点展开收缩(ok)
	
3. 优化下样式: (ok )
	* scss的激活简便写法: =>  &.active也就是说& 和 .active是兄弟关系,而不是父子关系
		<div class="treeList active">
		  <!-- 其他内容 -->
		</div>
		
		=> 
		.treeList {
		 
		  &.active {
			background-color: aqua;
		  }
		}
		
	* 	
	
	
# 优化树的点击事件
## 大纲
* inside的bindtap绑定为 nodeClick(ok)
* 递归点击事件(ok)
* 现在有个问题需要优化:就是我的showChildren是否需要isShowChildren来控制?
	-> isShowChildren的优势是:适合做初始的全局控制,例如初始就展开所有节点,但是不会保留节点展开状态=>因为wx:if
	-> 如果想要保留节点状态,使用hidden => 可以做个状态标记控制 => keepAlive去控制(ok)
	
	
# 先发布一个gitHub版本 (OK)
## 大纲:
* 目前的基本功能:
	1. 可以展示最基本展示树了
	2. 可以得到点击的节点信息了
	3. 并且具备是否保留点击节点状态的选项
	

# 做一个点击印记功能:(OK)
## 大纲
* 点击印记需要排他思想
* 点击了某个节点,需要把当前的祖先全部找到
* 把点击的节点和rootTree拿到,然后做一个Tree遍历,然后设置一个新属性isClick

### 实现
1. 首先需要知道rootTree是不是引用传递 => 设置那个isClick:true属性没有发生引用传递(OK)
	1. nodeClick函数增加一个新属性,isClick试试 => 导出去的node节点有isClick:true的属性,但是在rootTree没有发生改变
	
2. 需要拿到当前节点和rootTree去取travel设置:
	* 需要有一个options来帮助,例如idStr这些标识符号
	* 我需要传一个treeOptions对象:
	    treeOptions: {
		  dotBg: '#666666',
		  recordTrack: true, //是否开启点击轨迹记录
		  searchBg: '#00DDAA' //搜索匹配的背景颜色
		}
		=> treeOptions去设置接口
		
	* 但是现在有个问题,印记需要用到每个对象的唯一标识符
	=> 如果单独传个对象标识符,那么整棵树是否被限制?
	
3. 现在我们这个listData需要拦截了
	* 现在可以直接把list给tree组件,但是observes监听到了listData就要去验证,需要配合treeOptions
	1. 现在我直接把movieList给WxTree=> 展示了,但是都是父亲
	2. 我需要写一个验证器 Verify(OK)
	3. treeOptions需要有 isTreeConstruct //是否已经是树结构 (OK)
	4. 准备一颗TreeOptions配置(OK)
	5. 如果不是树,肯定要读取相关标识符号,相关treeOptions需要写一份默认的,因为我默认是children和title:(OK)
		  interface TreeOptions {
			[key: string]: any;
			isTreeConstruct?: boolean,  //给定的数组是否已经就是属性结构,默认:false
			dotBg?: string  //原点的背景色,#ffffff等十六进制颜色,默认:#808080
			searchBg?: string //搜索状态下,如果搜索成功了,匹配的节点的背景色(#ffffff等十六进制颜色)
			recordTrack?: boolean //是否开启点击印记,true表示开启;默认:false
			treeObjProps: {
			  id:string
			  title: string,  //树形UI用于展示的文本
			  fatherId: string, //树的指针,如{name:'文本标题',parentId:2,child:[....]},fatherId在此时取'parentId'
			  children: string //树孩子的名称,例如上行例子,取'child'
			}
		  }
		  
	6. 在Verify.ts需要导入convertToTree(OK)
		* 就是这个id和title和children都要传入的参数来(OK)
		* 那么需要TS函数重载
	7. 那么子组件的渲染的数据就要treeList而不是listData(OK)
	8. 那么inside组件的命名是否要有讲究呢?=> 因为现在是遍历treeList,并且把treeList的每一个item传给子组件了,那么listData->treeItem(OK)
	9. 那么inside之前用的title和children,是不是依赖 treeOptions.treeObjProps.title 
	10. 如果传入的listData本身就是一颗树
		* 那么fatherId也不是必须的啊=> 传空就行(OK)
		* 原生树直接返回就好了(OK)
		@ 转化树的name是不是多余啊
		
4. 现在开始思考下点击印记如何设计:(OK)
	* 点击印记应该在树里面开启
	* 可以在顶层拿到当前点击的节点和rootTree,那么应该在rootTree里面进行一个排他思想:
	/*
	  traverseTree(tree, clickedNode, idStr) {
		for (const node of tree) {
 
		  if (node[idStr] == clickedNode[idStr]) {
			node.isClick = true
		  } else {
			node.isClick = false
		  }

		  if (node.children && node.children.length > 0) {
			this.traverseTree(node.children, clickedNode, idStr);
		  }
		}
	  }
	*/
	* 需要考虑下方法的时间复杂度和空间复杂度 => 对于小规模树可行,对于大规模树,效率极差
	
	* rootTree可以拷贝一份做副本=>setData({treeList}) => 可以来个treeListOrigin(对treeList的一份拷贝)
	* 还是travelTree,只不过我找到这棵树,node的isClick设为true,然后立马return travel
	* 当我第二次点击的时候,我是不是就拿treeListOrigin,这样我找到你,就直接return
	
	
# 做一个点击印记的颜色以及原点颜色可配置的功能
## 大纲
* 首先配置圆点颜色(OK)
* 点击的印记背景色的配置
	=> 暂时的实现方式可能是比较冗余::
		    <view class="text {{treeItem.isClick?'click-active':''}} " 
			style="background-color:{{treeItem.isClick?options.clickBg:''}}" bind:tap="nodeClick" mark:item='{{treeItem}}'>{{treeItem[title]}}</view>
			
			
# 现在要做个搜索节点功能(OK)
## 大纲
* vant的原生微信小程序组件,也用到了setData:
	        reset: function () {
            this.setData({ currentDate: this.getInitialDate(this.data.defaultDate) });
            this.scrollIntoView();
        },
		
* 这个搜索框应该内嵌在组件里面
* 通过改变组件里面的treeList来控制树的显示
* 需要准备一个搜索的方法
* 但是搜索的颜色激活是否会与recordTrack:true的情况背景色冲突?
	1. 搜索深圳,得到的是一个node节点,这个node节点应该被放入一个results数组
	2. 并且我搜索的时候,应该传入的是当前的treeList
	3. treeList是有副作用属性,例如在recordTrack:true模式,节点可能会有isClick:true的键值对属性
	4. 需要明白wx:for在数据变化的时候,会重新销毁再渲染组件么?如果组件没有销毁,那么组件的isShowChildren这个数据可能会影响搜索的节点展开
		=> 在使用 wx:for 渲染列表时，小程序框架会尽量优化性能，复用组件实例，并且会调用合适的生命周期钩子函数。
		
	5. 如果我的搜索的时候,传的不是treeList的拷贝,而是treeListOrigin的拷贝,那么纯净的树就不会有副作用,但是isClick:true消失不见会导致之前的点击印记也没了
	6. 如果说这时再搜索`深圳`,你得到一个节点,然后再渲染这个搜索结果节点:如果你再点击节点,在recordTrack:true的情况下,由于之前考虑的是效率用的是treeListOrigin
	传入TravelTree方法(会提前return节省搜索次数) => 节点突然又变大了,并且没有搜索印记了
	
	7. 所以在开启点击印记的时候,遍历的话,需要看看当前treeOptions有没有事搜索模式,searchMode:true
	=> searchMode:true,首先会导致搜索框出现
	=> 其次在recordTrack为true的情况下,我需要判断searchMode是否为true,
		if searchMode也为true,我需要复用原来的treeList的拷贝(会保留印记),并且我的TravelTree的策略改为全局Travel,就是不满足的会增加isClick为false的键值属性对
		else 就是采用原来的Travel方式会提前return
		
	8. 如果search输入框为null,就传入原来的treeListOrigin的拷贝
	
### 实现
1. 准备一个输入框内嵌
	* 输入框涉及到样式,那么这个样式能否采取var的形式呢?
	* 之前的经验:
		1. 页面数据有个skins字符串:
		'--color:#2797ff;--color3:#1890ff;--color2:#91d5ff;--bg-my:url(http://kot33.net:3000/1/iconfile/raw/branch/main/images/themep/bg_2.png);--bg-index:url(http://kot33.net:3000/1/iconfile/raw/branch/main/images/themep/index2.png);\n  
		--bg-login:url(http://kot33.net:3000/1/iconfile/raw/branch/main/images/themep/login2.png)\n  '
		2. 其次的话在wxml顶层设计 style="{{skins}}"
		
	* vant-button的做法
		1. 组件的style:
		<button
		  id="{{ id || buttonId }}"
		  data-detail="{{ dataset }}"
		  class="custom-class {{ utils.bem('button', [type, size, { block, round, plain, square, loading, disabled, hairline, unclickable: disabled || loading }]) }} {{ hairline ? 'van-hairline--surround' : '' }}"
		  hover-class="{{ disabled || loading ? '' : 'van-button--active hover-class'}}"
		  lang="{{ lang }}"
		  form-type="{{ formType }}"
		  style="{{ computed.rootStyle({ plain, color, customStyle }) }}"   => 这里可能就是字符串
		  
		2. wxss:
			/*
			 @import '../common/index.wxss';
			.van-button--default {
			  background: var(--button-default-background-color, #fff); => 如果该自定义属性未定义，则使用备用值 #fff。
			  border: var(--button-border-width, 1px) solid var(--button-default-border-color, #ebedf0);
			  color: var(--button-default-color, #323233)
			}

			.van-button--primary {
			  background: var(--button-primary-background-color, #07c160);
			  border: var(--button-border-width, 1px) solid var(--button-primary-border-color, #07c160);
			  color: var(--button-primary-color, #fff)
			}

			.van-button--info {
			  background: var(--button-info-background-color, #1989fa);
			  border: var(--button-border-width, 1px) solid var(--button-info-border-color, #1989fa);
			  color: var(--button-info-color, #fff)
			}

			.van-button--danger {
			  background: var(--button-danger-background-color, #ee0a24);
			  border: var(--button-border-width, 1px) solid var(--button-danger-border-color, #ee0a24);
			  color: var(--button-danger-color, #fff)
			}

			.van-button--warning {
			  background: var(--button-warning-background-color, #ff976a);
			  border: var(--button-border-width, 1px) solid var(--button-warning-border-color, #ff976a);
			  color: var(--button-warning-color, #fff)
			}

			.van-button--plain {
			  background: var(--button-plain-background-color, #fff)
			}

			.van-button--plain.van-button--primary {
			  color: var(--button-primary-background-color, #07c160)
			}

			.van-button--plain.van-button--info {
			  color: var(--button-info-background-color, #1989fa)
			}
			*/
	* 输入框的样式该如何设计?
		1. 在treeOptions准备一个 searchInputCss
		2. 如果要设置边框颜色可以 searchInputCss="--border-color:#DDDDDD;"
		3. 如果要设置边框的圆角可以 searchInputCss="--border-color:#DDDDDD;--border-radius:5px"
		4. 如果要设置背景框的颜色可以 searchInputCss="--border-color:#DDDDDD;--border-radius:5px;--background-color:#33FFFF"
		5. 如果要设置边框的padding可以 searchInputCss="--border-color:#DDDDDD;--border-radius:5px;--background-color:#33FFFF;--padding:5px 5px" =>padding四个值： 分别应用于上、右、下、左四个方向的内边距
		
	* css的var的使用:
		background: var(--button-default-background-color, #fff); => 如果该自定义属性未定义，则使用备用值 #fff。	
		
2. 先searchMode去控制输入框的显示与隐藏	(OK)
3. 边框样式的自定义(OK)
	1. 准备一个 searchInputCss(OK)
	2. 去掉searchInputClass,让var有默认取值(OK)
	
4. 绑定搜索触发事件(OK)
	* 搜索可能需要一个debounce函数来防抖:
		/*
		function debounce(fn, interval) {
		  var timer;
		  var gapTime = interval || 1000; //间隔时间，如果interval不传，则默认1000ms
		  return function () {
			clearTimeout(timer);
			var context = this;
			var args = arguments; //保存此处的arguments，因为setTimeout是全局的，arguments不是防抖函数需要的。
			timer = setTimeout(function () {
			  fn.call(context, args);
			}, gapTime);
		  };
		}
		*/
	* 
	
5. 搜索方法需要怎么设计?(ok)
	* 首先还是要获得 treeList 和 treeListOrigin
	* treeList负责内部属性变更, treeListOrigin负责在空串直接返回 => 但是似乎没必要传treeListOrigin?
	* 似乎传treeList不太行,因为treeList本身是变化,导致第二次搜索不准确,因此还是要传treeListOrigin的拷贝
	* 需要在TreeUtil去编写搜索逻辑
	* 需要加个防抖设计:(OK)
		/*
		function debounce(fn, interval) {
		  var timer;
		  var gapTime = interval || 1000; //间隔时间，如果interval不传，则默认1000ms
		  return function () {
			clearTimeout(timer);
			var context = this;
			var args = arguments; //保存此处的arguments，因为setTimeout是全局的，arguments不是防抖函数需要的。
			timer = setTimeout(function () {
			  fn.call(context, args);
			}, gapTime);
		  };
		}
		*/
		
		使用:
		 inputChange: debounce(async function (e) {})
		
		=> TS 对象的导出细节:
 
		export const functions = {
		  add: (a: number, b: number) => a + b,
		  subtract: (a: number, b: number) => a - b,
		};
		这种导出,不能
		import {add} from 'xxx'是吧?
		而是只能 import {functions }是吗? => 对的，如果你导出的是一个包含多个函数的对象，那么在导入时，应该使用对象的名称。所以，如果你的导出是这样的：
	* 还要传个titleStr啊
	* 寻找祖先的方法设计:
		=> 需要一个childrenStr 
		
6. 搜索功能的优化,应该使用深度优先遍历的算法去回溯,而不是每次都反复寻找祖先	
	=> 但是尝试了很多方法,感觉还是各种方法都有他不足的地方,暂时选择这种方法吧
	=> 还需要考虑setData栈溢出了啊!!!
	* results数组似乎是多余的(OK)
	
7. openChildren也实现下搜索展示(OK)

8. 点击的话需要考虑下openChildren => await recordTrack问题
	@ openChildren属性添加了,节点展开收缩的状态点击有bug:
		* 搜索魔法,可以顺利找到三个祖先,并且三个祖先的openChildren:true,hidden:false都是符合预期的(OK)
		* 当直接点击`日本分区`的加号,是正常的,并且组件的展开状态也保留了 && 点击战败的加号减号,也不会出现bug
			=> 直接点击加号,减号:  toggleNode-> {movieId: 2, typeName: "日本分区", parentId: 0, wxTreeId: 2, childs: Array(3), …}
			=> 直接点击加号,减号: toggleNode-> {movieId: 12, typeName: "战败", parentId: 7, wxTreeId: 12, childs: Array(2), …}
			=> 并且是走了        console.log('if hasOwnProperty branch-->') 分支,有对象本身的openChildren: false/true 控制节点展开收缩

		--------	------
		* 似乎与点击印记相关,关了点击印记,发现就无bug了
			=> 关了印记,发现走的分支与纯toggle相同,因为纯toggle并不会向外抛出事件
			toggleNode-> {movieId: 2, typeName: "日本分区", parentId: 0, wxTreeId: 2, childs: Array(3), …}
				inside.ts:63 if hasOwnProperty branch-->
				
		* 因为开启印记,每一次点击都会造成recordTrack遍历,并且会导致重新setData:
		       this.setData({
				  treeList: treeListCopy
				})
				
			-> 先把recordTrack封装为方法::(ok)
			@ openChildren的优先级似乎要更高些; 如果openChildren存在应该由openChildren全权控制	 => 让isShowChildren: !node.openChildren 跟着node走就是了(ok)
			@ hidden属性还没用上? =>  display: {{true && treeItem.hidden?'none':'flex'}}; 与display冲突? => 暂时这样吧(ok)
			-> 直接搜索日本分区,节点似乎展不开

9. 搜索时,可以来个,是否只展示有关节点的配置:searchOnlyRelative (ok)

10. 关于recordTrack的优化:(OK)
	* 点击印记开启与搜索状态开启是冲突的,因为搜索状态是给treeList的每一个treeItem加上了openChildren属性:true;
	而点击印记直接去拿原始树了:      const treeListCopy: Array<WxTree.TreeNode> = JSON.parse(JSON.stringify(this.data.treeListOrigin)) ;
	=> 而原始树是没有isOpenChildren属性的,而层层的isShowChild又没有被激活
	
	* searchNode的时候,能不能说搜到了节点给个结果标记?=> 因为没有收到结果,树并没有给提示文本,感觉需要一个hasResult标志层层传递,但是不是引用传递,还不如直接用results(ok)
	* recordTrack是否采用原始树,是否可以用当前输入框的文本判断?
		1. 搜索模式:searchMode:true
		2. 搜索文本是没有记录到组件内部的
		3. 如果searchMode为true,我就使用当前的treeList副本? => 但是也有问题,在之前的节点追踪模式,是基于效率的,而不是基于全局:
			
			/*
			  clickNodeTravel(treeList: Array<WxTree.TreeNode>, node: WxTree.TreeNode, idStr: string, childrenStr: string): void {
				for (const item of treeList) {

				  if (item[idStr] === node[idStr]) {
					item.isClick = true
					return
				  }

				  if (item[childrenStr] && item[childrenStr].length) {
					this.clickNodeTravel(item[childrenStr], node, idStr, childrenStr)
				  }
				}


			  }
			*/
			
		4. 要写方法重载还是加个字段仅仅作为标识-> 方法重载把=> 方法重载不好用于递归,所以还是加入字段区分(ok)
		
		
@ 搜索到根节点的时候,发现打不开孩子=> 因为孩子的hidden等于true =>增加了严格限定,一旦严格限定没有拦截成功,效率可能会降低(OK)
	* 印记太坑了 => 暂时关闭了
	* 当results为空数组的时候,需要再次给全局的孩子收缩?=> 当 if (inputValue === '') {} 时=> 有时候又不生效
	* 搜索的话是用了 treeListOrigin的拷贝,但是子组件并没有销毁,isShowChildren属性仍然在组件内部承担着打开状态
	* 现象:就是搜索未搜索前,把日本分区点开了,然后再次搜索日本节点=> 节点是减号标志,但是孩子全部处于隐藏状态
	* 搜索的时候,额外设置一个searchAwake,内部使用的标志,用来唤醒 => (false || false ) && !undefined = false => 我是真的傻逼,你不注意层tree传递? => 那么 isShowChild:false似乎可以生效,但是你不注重层级!!!
		=> searchAwake往下传就行了,默认isShowChildren设为false,这样就可以显示一个加号了(ok)
		
	1. 目前没有点击印记,一些逻辑正常(ok)
	@ // searchOnlyRelative: true, //这个配置感觉有毒啊 ? true && undefined 在 JS里面等于 true? 
		-> && (treeItem.hidden===undefined?false:treeItem.hidden)
		-> 我的印记的来源是:点击印记需要到最外面才去找印记啊,在最外面才会有一个印记的setData
		-> 但是你点击node的时候,触发nodeClick,同时也触发toggle,而toggle这个节点没有isClick属性:  => 一闪而过说明这个setData是慢了
		-> this.data.options.searchOnlyRelative && 关系不大感觉,因为
			childs: (3) [{…}, {…}, {…}]
			movieId: 2
			parentId: 0
			typeName: "日本分区"
			wxTreeId: 2
					
		-> 就是说recordTrack能不能帮我把孩子展开下=> 可以的
		-> 如果我没有开启印记,谁来帮你展开? ->没有开启印记就需要自己判断去展开(OK)
		-> 但是展开的Children又不会一直保持
			* toggle是有节点的
			* 因为他没有遍历所有的把所有的都展开,他只是遍历了一代而已,因此再次点击根节点setData就会导致用了没有被处理到的节点=> searchAwake传个true下去?
			* 还是要加限制并且全局遍历node
			* 需要再treeUtil写个遍历:
			      if (this.data.options.searchMode && this.data.options.searchOnlyRelative && !this.data.options.recordTrack && node[this.data.children]) {}
			* record也需要增加严格的限定模式	  =>         treeUtil.travelNodeForVisible(node, this.data.children)
			
			
		
11. 做一下树的编辑模式(OK)
	* 对于任意一个节点都有 添加,修改节点名称,删除,移动
	* 添加节点的时候,那么新增的节点需要由唯一的id=> 在搜索节点使用到了,拿取节点的所有祖先需要id比较:
		find((child: WxTree.TreeNode) => child[idStr] === node[idStr])) {....} && 节点的id本身就该唯一
		-> 监听一个editMode:true,如果为true就先执行一波?
		-> 可能一开始的话,options就传了editMode,但是,editMode和listData同时监听,谁先谁后怎么解?
		-> Verify.listData(n)是个拦截:: 这段代码一旦执行完,一棵树也出来了
		-> editMode为true,需要看看treeListOrigin是否为空数组[],如果不为空数组说明准备好了
		-> 要不要判断对象唯一id的类型?如果是number类型使用有序数组?如果使用雪花算法? => 可以在listData监听到id类型存储下来
		
	1. 添加模式的实现:(OK(
		* 监听editMode触发方法:=> 不要监听,可以在Verify里面去拦截(OK)
		* editMode为true的话需要调用editTreeInit,最后list的返回结果可能要改(OK)
		* 判断id的类型是string是number(OK)
		* 如果是number类型,遍历treeList,并且为id进行从小到大排序,这样可以便于我后续添加节点时,id不重复的做法方便(OK)
			-> 遍历一个树形数组,数组里面的每一个对象的唯一标识符对应的值是number类型,例如{movieId:1,name:'湛蓝'};我在遍历这颗树形数组的同时
			我要每个对象id所对应的值,拿到,并且做一个升序排序,得到一个id集合的数组,从小到大排序的
			
			* 编写一个 travelTreeForIdValue(OK)
			
		* 现在准备下这个非number类型的id值数据(OK)
			-> convertTree都有毒了,针对parentId为空串的情况有毒 => 没,因为children是可选的你知道吗? (OK)
			
		1. editTreeInit可以返回一个泛型结果:(OK)
		2. 长按节点绑定方法:(OK)
		3. longPress应该隔离一份方法(OK)
		4. 长按的话,肯定需要弹出,所以需要准备图标(OK)
			-> 新建images文件夹-> (OK)
		5. 每一颗树能不能拿到编辑模式的字段?=>options.editMode (OK)
		6. 我要给当前节点左侧展现四个选项图标(OK)
			-> 引入四个图片于wxml
		
		7. 思考一个问题:编辑模式是否需要排他UI显示,如果需要排他的话,要怎么个思路?(OK)
			* 如果一个节点longpress了,可以this.setData longPressNode:当前长按的节点,longPressNode初始化肯定是为null
			* 其次,每一个longPress触发,会给一个通知给到rootTree,
			* rootTree给一个 editAwake ,子组件负责监听editAwake,
			* 父组件的editAwake可以传递一个editInfo,editInfo有被长按的那个节点,还有一个true
			* 子组件的本身是不是有treeItem,我通过被长按的节点和treeItem做比较就可以过滤到目标 ,然后把目标的showEditOps设为true
			
			1. 父组件层层传递 editAwake(OK)
			2. longPress向上抛出的条件是 editMode=true(OK)
			3. nodeLongPress监听到以后,需要setData
				* const isEmptyObject = obj => JSON.stringify(obj) === '{}';
		8. 关于点击叉叉,也能让showEditOps变为false	(OK)
		9. 点击添加按钮,有个致命的缺陷,我当前这个子组件是没有rootTree的,所以我要抛给顶层,因为顶层有当前的treeList(OK)
		10. 在rootTree,可以拿到当前的treeList吗?=>可以的(OK)
		11. rootTree的 node Edit也需要switch下(OK)
		12. 需要再treeUtil里面写个方法: addNodeOfEdit(OK)
		13. 点击添加按钮,还需要做一个pop层哦:=> 先不需要吧(OK)
			* 点击添加需要让当前的treeList变高哦=> 需要 editType(ok)
		14. 添加模式点击确定的逻辑点击确定的逻辑(OK)
			-> 绑定输入逻辑(OK)
			
		15. 如果用户添加模式在输入文本后点击了确定,(OK)
			* onEdit不要触发,而是点击edit的确定才层层往外面抛出           // this.triggerEvent('nodeEdit', { type, node })
		16. addNodeOfEdit()函数实现思路:(OK)
			* 从treeList找到当前node,把当前node的children尾插孩子就行了,当然有没有,children属性判断下,
			* 其次,需要递归遍历树,这个树的遍历能不能不要使用递归遍历而是使用非递归?=>可以,但是整个项目的风格都是递归风格了
				-> 还需要传 idstr,titleStr,childrenStr 的相关标识啊
		17. 点击确定的时候editType也应该设为''(OK)
		18. 增删改查的图片不应该在添加新节点以后继续存在(OK)
		19. 先把UUID实现下思路(OK)
			* TreeUtil应该引入UUID这个类(OK)
			* generateUniqueId()
			
		20. 其次把当前最新的treeList抛出去(OK)
		21. 我这个增加不能增加root啊(OK)
			* 可以在editMode增加一个 isRoot 属性(OK)
			* 节点长按的时候需要多增加一个图片,editType = -1(OK)
			* 需要复用输入框,那么 editType 需要需要手动获取(OK)
			* editOperate 的 -1 机制都是一样的
			
		22. addNodeOfEdit()需要加个type参数啊(OK)
		
12. 编辑模式的删除模式:(OK)
	* 删完了,五个图片还在的bug是什么鬼?=>一个分支的问题(OK)
	* 删完之后,如果还有Children属性,判断children数组是否为空了,如果为空数组,还要删掉这个children属性(OK)
		* 是否要传一个被删除节点的上一层父亲? => 可以多传一个父亲(OK)
	* 添加子节点模式会给father加上一个openChildren属性,来打开孩子 => delete掉这个属性就行
	
13. 现在需要做修改节点模式(OK)
	* 修改节点的type是2,
	* 如果点击修改节点,应该先拿到当前的节点名称显示在input输入框里面(OK)
	* 差不多和新增复用,就是EditType做区分
	
# 移动节点的设计(OK)
## 大纲
* 移动节点的功能你要做成什么效果?
	1. 功能十分强大的移动方案:	
		* 点击移动按钮,通知整个树,做一个节点的分隔
		* 用户如果点击的是分隔本身,那么就把这个节点移动到点击分隔的节点处
		* 如果用户点击的是节点本身,就把这个节点作为被点节点的一个孩子挂载上去
		* 用户如果点击的是加号,只做展开操作的事情,展开之后,就能看到可以移动的地方了
		* 这个方案需要变量控制wxml样式的显示
		* 根的话,只能向上or 向下移动,根不能乱移动->不满意这个根,你可以删掉
		
	2. 功能比较捞的移动方案:
		* 点击移动按钮,直接默认向上移动,移动到顶端又返回到向下
		
* 综合思路:
	* 点击移动的时候,还需判断当前节点是否有isRoot属性,如果有的话,这个移动只能是默认向下移动,移动到最低端又 转回来
	* 如果不是根节点,那就要变量配合样式了
	* 如果一个节点往下移动,移动到自己的孩子下面,那么就要根儿互换了  ----------> 这个功能是比较靠谱的功能了(OK)
	
### 实现
1. 点击移动按钮的逻辑(OK)
	* 找到被移动的节点在treeList的位置,然后再看被找到的节点是不是root=>我觉得根是可以乱移动的(OK)
	* 点击移动的话,是不是要触发一个全局的moveAwake,全局的moveAwake就要通知样式的改变(OK)
	* 移动节点的本身会由一个背景色-> 需要一个 markMoveBg = true (OK)
	* 五张图片把前面四张都隐藏(OK)
	* 点击叉叉的时候,要关闭 moveMode,markMoveBg(ok)
	
2. 现在需要点击移动到此处的逻辑:
	* 移动到此处,要分type类型去移动;(OK)
	* 移动模式开启的时候,节点点击将会不再生效,把控制权交给toggle就行了(OK)
	* 点击到移动文本的时候,需要单独触发一个事件吗?因为已经没有处于case当中,=>重新触发一个事件比较好(OK)
	* 我可以拿到targetNode的位置,那么我能拿到currentNode吗? => moveNode可以在rootTree拿到,rootTree可以保存moveNode:(OK)
		-> moveAwake承担着唤醒功能和保存功能:
		        this.setData({
            moveAwake: node
          })
	* 那我需要触发一个moveNode事件(OK)
	@ 现在有个bug:就是多次长按移动,会有一个印记多次的bug => 和searchAwake差不多(OK)
	1. TreeUtil是不是要写个方法? =>是的
		* 首先我能拿到的数据是rootTreeList,current,target,slot
		* 我可以先找到target节点,找到以后,先比较target和current的关系=>因为我这个移动是顺便移动的,如果target的辈分属于current,那么移动的结果是两个节点交换位置
		* 如果我的target辈分不属于current,我肯定需要一个中间变量,然后读取slot的值,把current先安排好,然后再把current从当前位置删除掉
		* 如果current和slot相同,直接return结束就行(OK)
	2. 	在正式moveNodeOfEdit之前,我需要确定current和target的关系,我current有没有target这个孩子,如果有的话,exchange:true,否则的话exchange:false (ok)
	3. 两个节点交换位置如何设计?
		* 我拿目标节点在树里面匹配倒了,但是此时很尴尬,node[treeObjProps.id]没有父亲节点支撑
		* 所以说这个函数还要传一个父父亲节点=>父亲节点用来引用改变的(OK)
		* 移动的时候,还需要考虑下slot,slot只有0,1 两个取值
		* exchange模式,把children也给带过去了=>如果说current还有children的话,children只能先去掉(OK)
		* 我还需要去写个 _exchangeNode 方法 => 整个rootTree还要接着传,=>current肯定会出现两个,但是一定不会找错到后面那个(OK)
		* @完了,卫龙和亲嘴骚换了以后,清嘴骚的孩子不见了=>加个判断就行了(OK)
		
	4. 两个节点非交换该如何设计?(OK)
		* treeList里面肯定会有current,也会有target
		* treeList可以先去找current,treeList找到current的时候,当前treeList的node也知道了,可以先让treeList自行自宫=>treeList是不是就少了节点了=> splice(
		* 在剩余的treeList里面再去找target的位置,此时treeList又会有一个node,感觉还是需要一下这个fatherNode(应该是target的fatherNode)
			-> 如果fatherNode为null,就用rootTreeList,不为null就用fatherNode.children
			-> node出来了以后,这个i也出来了;例如i=0;slot = 0 || 1; insertIndex = i+slot
			
		1. 感觉要新写一个级别比较高的方法了,那exchange作为外层区分了啊	(OK)
		2. 然后需要找target的位置
		3. splice自宫以后,如果children数组的的长度为0,那么这个children属性也要删掉(OK)
		
		
		
# 感觉缺少了一个,current节点作为target节点的一个孩子的功能:(OK)
## 大纲
* 如果说要做一个移动到一个节点,作为一个儿子的功能,要不要复用当前的逻辑呢?
* 当前的移动主要就是简单的交换位置+删除插入的方式	
* 如果我在移动模式,点击节点本身,是否要触发这个,作为儿子的效果呢?
* 并且有个问题比较棘手,长辈往下移动=>还是和当前一样采取交换策略算了
* 那么还是要判断是否要Exchange

* 当前移动触发的信息:
    onMoveClick(e: WechatMiniprogram.Touch) {
      console.log('TreeItem->', this.data.treeItem)
      console.log('onMoveClick-->', e.mark?.type)
      const target: WxTree.TreeNode = this.data.treeItem
      const slot: number = (Number)(e.mark?.type)
      this.triggerEvent('moveNode', {
        target,
        slot -----------> 这里可以传额外的标志,也可以说我判断slot属性作为唯一的标志
      })
    },
	
### 实现
1. 给移动箭头区分颜色(OK)
2. 移动模式,传递flag标志(OK)
		      this.triggerEvent('moveNode', {
				target,
				slot,
				move:true
			  })
			  ----
		this.triggerEvent('moveNode', {
          target: e.mark?.item,
          move: false
        })
		
3. 那么需要写新的方法了
	* 因为无论是向下移动,还是向下子节点,都是统一交换节点,而非Exchange,才作为区分移动还是作为目标的儿子
	* 我能拿到当前current和target节点
	* 我还能拿到treeList
	* treeList可以找,先找current,treeList找到current之后,需要treeList自己先自宫,自宫的话还是需要fatherNode
	* treeList自宫完以后,还需要去找target,此时treeList可以拿到一个node,如果这个node没有Children,我就给他加个Children属性,总而言之,让这个node强行挂载current
	
	* 方法:
	  moveNodeforChildren(
    treeList: WxTree.TreeNode[],
    current: WxTree.TreeNode,
    target: WxTree.TreeNode,
    fatherNode: WxTree.TreeNode | null,
    rootTreeList: WxTree.TreeNode[],
    treeObjProps: Record<string, any>
  )

4. 被自宫的treeList如果children的length等于0,也要去delete children属性  


# @每次添加新节点,WeTree在第二次添加以后,id会重复的问题 (OK)
## 大纲
* 数字版id会重复
* 但是字符串的id不会重复=> 
	* 主要是增加了节点,没有重新计算idInfo,导致value一直是旧的